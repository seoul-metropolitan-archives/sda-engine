<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="rmsoft.ams.seoul.cl.cl002.dao.Cl002Mapper">
    <select id="getClassificationScheme" resultType="Cl00101VO" statementType="PREPARED">
        <![CDATA[
            SELECT
              CLASSIFICATION_CODE as classificationCode,
              CLASSIFICATION_NAME as classificationName,
              CLASSIFICATION_SCHEME_UUID as classificationSchemeUuid
            FROM
              CL_CLASSIFICATION_SCHEME
            WHERE
              FC_AD_CODE(STATUS_UUID) = 'CONFIRM'
              AND USE_YN = 'Y'
              AND ROWNUM <= 1
            ORDER BY
              CLASSIFICATION_CODE ASC
        ]]>
    </select>
    <select id="getClassList" resultType="Cl00201VO" parameterType="Cl00201VO" statementType="PREPARED">
        SELECT
          CLASS_UUID as classUuid,
          CLASSIFICATION_SCHEME_UUID as classificationSchemeUuid,
          STATUS_UUID as statusUuid,
          PARENT_CLASS_UUID as parentClassUuid,
          CLASS_CODE as classCode,
          CLASS_NAME as className,
          CLASS_LEVEL_UUID as classLevelUuid,
          ORDER_NO as orderNo,
          ORDER_KEY as orderKey,
          USE_YN as useYn,
          NOTES as notes,
          DESCRIPTION as description,
        <include refid="Common.UserName"><property name="userUuid" value="INSERT_UUID"/></include> as insertUuid,
          INSERT_DATE as insertDate,
        <include refid="Common.UserName"><property name="userUuid" value="UPDATE_UUID"/></include> as updateUuid,
          UPDATE_DATE as updateDate
        FROM
          CL_CLASS
        <where>
            <if test="classificationSchemeUuid != null">
                CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
            </if>
            <if test="parentClassUuid != null">
                AND  PARENT_CLASS_UUID = #{parentClassUuid}
            </if>
            <if test="classUuid != null">
                AND Z1.CLASS_UUID != #{classUuid}
            </if>
            <if test="statusUuid != null">
                AND STATUS_UUID = #{statusUuid}
            </if>
            <if test="classCode != null">
                AND CLASS_CODE = #{classCode}
            </if>
            <if test="classLevelUuid != null">
                AND CLASS_LEVEL_UUID = #{classLevelUuid}
            </if>
            <if test="useYn != null">
                AND USE_YN = #{useYn}
            </if>
        </where>
    </select>
    <select id="getClassHierarchyList" resultType="cl00201VO" parameterType="cl00201VO" statementType="PREPARED">
        SELECT
        CLASS_UUID as classUuid,
        CLASSIFICATION_SCHEME_UUID as classificationSchemeUuid,
        STATUS_UUID as statusUuid,
        PARENT_CLASS_UUID as parentClassUuid,
        CLASS_CODE as classCode,
        CLASS_NAME as className,
        CONNECT_BY_ISLEAF AS isLeaf,
        '[' || FC_AD_CODE_NM(CLASS_LEVEL_UUID) || '] ' || CLASS_NAME as classTreeName,
        CLASS_LEVEL_UUID as classLevelUuid,
        ORDER_NO as orderNo,
        ORDER_KEY as orderKey,
        SUBSTR(SYS_CONNECT_BY_PATH(ROWID, '.'), 2 , length(SYS_CONNECT_BY_PATH(ROWID, '.'))) as orderKey1,
        USE_YN as useYn,
        DESCRIPTION as description,
        <include refid="Common.UserName"><property name="userUuid" value="INSERT_UUID"/></include> as insertUuid,
        INSERT_DATE as insertDate,
        <include refid="Common.UserName"><property name="userUuid" value="UPDATE_UUID"/></include> as updateUuid,
        UPDATE_DATE as updateDate
        FROM
        CL_CLASS
        <where>
            <if test="classificationSchemeUuid != null">
                CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
            </if>
        </where>
        START WITH PARENT_CLASS_UUID IS NULL
        CONNECT BY PRIOR CLASS_UUID = PARENT_CLASS_UUID
        ORDER SIBLINGS BY ORDER_KEY
    </select>
    <select id="getClassHierarchyListForClassify" resultType="cl00201VO" parameterType="cl00201VO" statementType="PREPARED">
        SELECT
        CLASS_UUID as classUuid,
        CLASSIFICATION_SCHEME_UUID as classificationSchemeUuid,
        STATUS_UUID as statusUuid,
        PARENT_CLASS_UUID as parentClassUuid,
        CLASS_CODE as classCode,
        CLASS_NAME as className,
        CONNECT_BY_ISLEAF AS isLeaf,
        '[' || FC_AD_CODE_NM(CLASS_LEVEL_UUID) || '] ' || CLASS_NAME as classTreeName,
        CLASS_LEVEL_UUID as classLevelUuid,
        ORDER_NO as orderNo,
        ORDER_KEY as orderKey,
        SUBSTR(SYS_CONNECT_BY_PATH(ROWID, '.'), 2 , length(SYS_CONNECT_BY_PATH(ROWID, '.'))) as orderKey1,
        USE_YN as useYn,
        DESCRIPTION as description,
        <include refid="Common.UserName"><property name="userUuid" value="INSERT_UUID"/></include> as insertUuid,
        INSERT_DATE as insertDate,
        <include refid="Common.UserName"><property name="userUuid" value="UPDATE_UUID"/></include> as updateUuid,
        UPDATE_DATE as updateDate
        <if test="aggregationUuid != null">
        ,(
            SELECT COUNT(CLASS_UUID) FROM CL_CLASSIFY_RECORDS_RESULT
            WHERE CLASS_UUID = T1.CLASS_UUID
            AND AGGREGATION_UUID = #{aggregationUuid}
        ) AS ClassifyCount
        </if>
        FROM
        CL_CLASS T1
        <where>
            <if test="classificationSchemeUuid != null">
                CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
            </if>
        </where>
        START WITH PARENT_CLASS_UUID IS NULL AND FC_AD_CODE(STATUS_UUID) = 'CONFIRM'
        CONNECT BY PRIOR CLASS_UUID = PARENT_CLASS_UUID AND FC_AD_CODE(STATUS_UUID) = 'CONFIRM'
        ORDER SIBLINGS BY ORDER_KEY
    </select>
    <select id="getSelectedClassList" resultType="cl00201VO" parameterType="cl00201VO" statementType="PREPARED">
        SELECT
        classUuid,
        classificationSchemeUuid,
        statusUuid,
        parentClassUuid,
        classCode,
        className,
        classLevelUuid,
        orderNo,
        orderKey,
        path,
        orderKey1,
        parentClassCode,
        parentClassName,
        useYn,
        notes,
        description,
        insertUuid,
        insertDate,
        updateUuid,
        updateDate
        FROM
        (
            SELECT
            CLASS_UUID as classUuid,
            CLASSIFICATION_SCHEME_UUID as classificationSchemeUuid,
            STATUS_UUID as statusUuid,
            PARENT_CLASS_UUID as parentClassUuid,
            CLASS_CODE as classCode,
            CLASS_NAME as className,
            CLASS_LEVEL_UUID as classLevelUuid,
            FC_CL_PARENT_CODE(PARENT_CLASS_UUID) as parentClassCode,
            FC_CL_PARENT_NAME(PARENT_CLASS_UUID) as parentClassName,
            ORDER_NO as orderNo,
            ORDER_KEY as orderKey,
            NOTES as notes,
            DESCRIPTION as description,
            SUBSTR(SYS_CONNECT_BY_PATH('[' || FC_AD_CODE_NM(CLASS_LEVEL_UUID) || '] ' || CLASS_NAME,' >> '),4) path,
            SUBSTR(SYS_CONNECT_BY_PATH(ROWID, '.'), 2 , length(SYS_CONNECT_BY_PATH(ROWID, '.'))) as orderKey1,
            USE_YN as useYn,
            <include refid="Common.UserName"><property name="userUuid" value="INSERT_UUID"/></include> as insertUuid,
            INSERT_DATE as insertDate,
            <include refid="Common.UserName"><property name="userUuid" value="UPDATE_UUID"/></include> as updateUuid,
            UPDATE_DATE as updateDate
            FROM
            CL_CLASS
            <where>
                <if test="classificationSchemeUuid != null">
                    CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
                </if>
            </where>
            START WITH PARENT_CLASS_UUID IS NULL
            CONNECT BY PRIOR CLASS_UUID = PARENT_CLASS_UUID
            ORDER SIBLINGS BY ORDER_KEY
        )

        <where>
            <if test="orderKey1 != null">
                (orderKey1 LIKE  #{orderKey1} || '.' || '%'
                OR orderKey1 =  #{orderKey1})
            </if>
            <if test="classCode != null">
                AND UPPER(classCode) LIKE '%' || #{classCode} || '%'
            </if>
            <if test="className != null">
                AND UPPER(className) LIKE '%' || #{className} || '%'
            </if>
            <if test="useYn != null">
                AND useYn = #{useYn}
            </if>
            <if test="classLevelUuid != null">
                AND classLevelUuid = #{classLevelUuid}
            </if>
            <if test="statusUuid != null">
                AND statusUuid = #{statusUuid}
            </if>
            <if test="parentClassCode != null">
                AND UPPER(parentClassCode) LIKE '%' || #{parentClassCode} || '%'
            </if>
            <if test="parentClassName != null">
                AND UPPER(parentClassName) LIKE '%' || #{parentClassName} || '%'
            </if>
        </where>
    </select>
    <select id="getSelectedClassDetail" resultType="cl00202VO" parameterType="cl00201VO" statementType="PREPARED">
        SELECT
        CLASS_UUID as classUuid,
        RECORD_SCHEDULE_UUID as recordScheduleUuid,
        ADD_METADATA01 as addMetadata01,
        ADD_METADATA02 as addMetadata02,
        ADD_METADATA03 as addMetadata03,
        ADD_METADATA04 as addMetadata04,
        ADD_METADATA05 as addMetadata05,
        ADD_METADATA06 as addMetadata06,
        ADD_METADATA07 as addMetadata07,
        ADD_METADATA08 as addMetadata08,
        ADD_METADATA09 as addMetadata09,
        ADD_METADATA10 as addMetadata10,
        <include refid="Common.UserName"><property name="userUuid" value="INSERT_UUID"/></include> as insertUuid,
        INSERT_DATE as insertDate,
        <include refid="Common.UserName"><property name="userUuid" value="UPDATE_UUID"/></include> as updateUuid,
        UPDATE_DATE as updateDate
        FROM
        CL_CLASS_CON
        <where>
            <if test="classUuid != null">
                CLASS_UUID = #{classUuid}
            </if>
        </where>
    </select>
    <select id="getChildClass" resultType="int" parameterType="String" statementType="PREPARED">
        SELECT COUNT(*)
        FROM CL_CLASS
        WHERE PARENT_CLASS_UUID = #{classUuid}
    </select>
    <select id="getMaxClassCode" resultType="String" parameterType="String" statementType="PREPARED">
        SELECT Z.CLASS_CODE
        FROM CL_CLASS Z
        WHERE Z.CLASS_CODE LIKE
          (
            SELECT CLASSIFICATION_CODE
            FROM CL_CLASSIFICATION_SCHEME
            WHERE CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
           )
          || '%'
        AND ROWNUM = 1
        ORDER BY Z.CLASS_CODE DESC
    </select>
    <update id="updateStatusConfirm"  parameterType="Cl00201VO" statementType="PREPARED">
        UPDATE
          CL_CLASS
        SET
          STATUS_UUID = #{statusUuid},
          UPDATE_UUID = #{updateUuid},
          UPDATE_DATE = to_timestamp(#{updateDate},'yyyy/mm/dd hh24:mi:ss.ff3')
        WHERE
          CLASS_UUID IN (
                          SELECT
                            CLASS_UUID
                          FROM
                            CL_CLASS
                          START WITH CLASS_UUID = #{classUuid}
                          CONNECT BY PRIOR CLASS_UUID = PARENT_CLASS_UUID
                        )
    </update>
    <select id="getClassForClassify" resultType="int" parameterType="Cl00201VO" statementType="PREPARED">
        SELECT COUNT(*)
        FROM CL_CLASSIFY_RECORDS_RESULT
        WHERE CLASS_UUID IN (
            SELECT
                classUuid
            FROM
            (
                SELECT
                    CLASS_UUID as classUuid,
                    CONNECT_BY_ISLEAF AS isLeaf,
                    SUBSTR(SYS_CONNECT_BY_PATH(ROWID,'.'), 2 ,length(SYS_CONNECT_BY_PATH(ROWID,'.'))) as orderKey1
                FROM
                    CL_CLASS
                WHERE
                    CLASSIFICATION_SCHEME_UUID = #{classificationSchemeUuid}
                START WITH PARENT_CLASS_UUID IS NULL
                CONNECT BY PRIOR CLASS_UUID = PARENT_CLASS_UUID
                ORDER SIBLINGS BY ORDER_KEY
            )
            WHERE
            (
                orderKey1 LIKE  #{orderKey1} || '.' || '%'
                OR orderKey1 =  #{orderKey1}
            ) AND isLeaf = 1
        )
    </select>
</mapper>